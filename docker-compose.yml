# Docker Compose for EggLedger Application
# This orchestrates all services including database, API, client, and AppHost

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: eggledger
      POSTGRES_USER: eggledger
      POSTGRES_PASSWORD: eggledger123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - eggledger-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eggledger"]
      interval: 30s
      timeout: 10s
      retries: 5

  # EggLedger API
  api:
    build:
      context: .
      dockerfile: EggLedger.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=eggledger;Username=eggledger;Password=eggledger123
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - eggledger-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # EggLedger Client (Vue.js)
  client:
    build:
      context: ./EggLedger.Client
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - eggledger-network
    environment:
      - VITE_API_URL=http://api:8080

  # EggLedger AppHost (Aspire)
  apphost:
    build:
      context: .
      dockerfile: Dockerfile
      target: apphost
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "15000:15000"
      - "15001:15001"
    depends_on:
      - postgres
      - api
    networks:
      - eggledger-network

volumes:
  postgres_data:

networks:
  eggledger-network:
    driver: bridge
